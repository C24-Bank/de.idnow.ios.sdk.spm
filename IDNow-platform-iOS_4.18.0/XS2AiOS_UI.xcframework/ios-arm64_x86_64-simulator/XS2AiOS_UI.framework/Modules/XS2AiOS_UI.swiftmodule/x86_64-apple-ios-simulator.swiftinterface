// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6 (swiftlang-5.6.0.323.62 clang-1316.0.20.8)
// swift-module-flags: -target x86_64-apple-ios10.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name XS2AiOS_UI
import CoreGraphics
import Foundation
import LocalAuthentication
import Network
import PDFKit
import QuartzCore
import SafariServices
import Security
import Swift
import UIKit
import WebKit
import _Concurrency
@_hasMissingDesignatedInitializers public class XS2AiOS {
  public var configuration: XS2AiOS_UI.XS2AiOS.Configuration
  final public let styleProvider: XS2AiOS_UI.XS2AiOS.StyleProvider
  public var currentStep: XS2AiOS_UI.WizardStep? {
    get
    set
  }
  public static func clearKeychain() throws
  public static func configure(withConfig configuration: XS2AiOS_UI.XS2AiOS.Configuration, withStyle styleProvider: XS2AiOS_UI.XS2AiOS.StyleProvider)
  public static var shared: XS2AiOS_UI.XS2AiOS {
    get
  }
  @objc deinit
}
extension XS2AiOS_UI.XS2AiOS {
  public struct Configuration {
    public init(wizardSessionKey: Swift.String, backButtonAction: @escaping () -> Swift.Void = {}, onStepChanged: @escaping (XS2AiOS_UI.WizardStep?) -> Swift.Void = {_ in }, baseURL: Swift.String = "https://api.xs2a.com/jsonp")
  }
  public struct ButtonStyle {
    public init(textColor: UIKit.UIColor, backgroundColor: UIKit.UIColor)
  }
  public struct AlertStyle {
    public init(textColor: UIKit.UIColor, backgroundColor: UIKit.UIColor)
  }
  public struct StyleProvider {
    public enum LogoVariation : Swift.String {
      case standard
      case white
      case black
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public init(font: XS2AiOS_UI.FontName = .systemDefault, tintColor: UIKit.UIColor = UIColor(red: 0.11, green: 0.45, blue: 0.72, alpha: 1.0), logoVariation: XS2AiOS_UI.XS2AiOS.StyleProvider.LogoVariation = .standard, backgroundColor: UIKit.UIColor = .white, textColor: UIKit.UIColor = UIColor(red: 0.27, green: 0.27, blue: 0.28, alpha: 1.0), inputBackgroundColor: UIKit.UIColor = UIColor(red: 0.91, green: 0.95, blue: 0.97, alpha: 1.0), inputBorderRadius: CoreGraphics.CGFloat = 6, inputTextColor: UIKit.UIColor = UIColor(red: 0.27, green: 0.27, blue: 0.28, alpha: 1.0), placeholderColor: UIKit.UIColor = .systemGray, buttonBorderRadius: CoreGraphics.CGFloat = 6, submitButtonStyle: XS2AiOS_UI.XS2AiOS.ButtonStyle = ButtonStyle(textColor: .white, backgroundColor: UIColor(red: 0.11, green: 0.45, blue: 0.72, alpha: 1.0)), backButtonStyle: XS2AiOS_UI.XS2AiOS.ButtonStyle = ButtonStyle(textColor: .white, backgroundColor: .systemGray), abortButtonStyle: XS2AiOS_UI.XS2AiOS.ButtonStyle = ButtonStyle(textColor: .white, backgroundColor: .systemGray), restartButtonStyle: XS2AiOS_UI.XS2AiOS.ButtonStyle = ButtonStyle(textColor: .white, backgroundColor: .systemGray), alertBorderRadius: CoreGraphics.CGFloat = 6, errorStyle: XS2AiOS_UI.XS2AiOS.AlertStyle = AlertStyle(textColor: .white, backgroundColor: .systemRed), warningStyle: XS2AiOS_UI.XS2AiOS.AlertStyle = AlertStyle(textColor: .black, backgroundColor: .systemOrange), infoStyle: XS2AiOS_UI.XS2AiOS.AlertStyle = AlertStyle(textColor: .white, backgroundColor: UIColor(red: 0.11, green: 0.45, blue: 0.72, alpha: 1.0)))
  }
}
public enum XS2ASuccess {
  case finish
  case finishWithCredentials(Swift.String)
}
public enum XS2AError : Swift.Error {
  case userAborted
  case networkError
  public static func == (a: XS2AiOS_UI.XS2AError, b: XS2AiOS_UI.XS2AError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum XS2ASessionError : Swift.Error {
  case loginFailed(recoverable: Swift.Bool)
  case sessionTimeout(recoverable: Swift.Bool)
  case tanFailed(recoverable: Swift.Bool)
  case techError(recoverable: Swift.Bool)
  case testmodeError(recoverable: Swift.Bool)
  case transNotPossible(recoverable: Swift.Bool)
  case validationFailed(recoverable: Swift.Bool)
  case other(errorCode: Swift.String, recoverable: Swift.Bool)
}
public enum Result<XS2ASuccess, XS2AError, XS2ASessionError> {
  case success(XS2ASuccess)
  case failure(XS2AError)
  case sessionError(XS2ASessionError)
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class XS2AViewController : UIKit.UIViewController, UIKit.UIAdaptivePresentationControllerDelegate {
  @_Concurrency.MainActor(unsafe) public init(xs2a: XS2AiOS_UI.XS2AiOS = .shared, completion: @escaping (XS2AiOS_UI.Result<XS2AiOS_UI.XS2ASuccess, XS2AiOS_UI.XS2AError, XS2AiOS_UI.XS2ASessionError>) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) @objc public func presentationControllerDidAttemptToDismiss(_ presentationController: UIKit.UIPresentationController)
  @_Concurrency.MainActor(unsafe) @objc public func presentationControllerShouldDismiss(_ presentationController: UIKit.UIPresentationController) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @objc deinit
}
public enum WizardStep : Swift.String {
  case tan
  case bank
  case account
  case login
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum FontName {
  case custom(Swift.String)
  case systemDefault
}
extension XS2AiOS_UI.XS2AiOS.StyleProvider.LogoVariation : Swift.Equatable {}
extension XS2AiOS_UI.XS2AiOS.StyleProvider.LogoVariation : Swift.Hashable {}
extension XS2AiOS_UI.XS2AiOS.StyleProvider.LogoVariation : Swift.RawRepresentable {}
extension XS2AiOS_UI.XS2AError : Swift.Equatable {}
extension XS2AiOS_UI.XS2AError : Swift.Hashable {}
extension XS2AiOS_UI.WizardStep : Swift.Equatable {}
extension XS2AiOS_UI.WizardStep : Swift.Hashable {}
extension XS2AiOS_UI.WizardStep : Swift.RawRepresentable {}
